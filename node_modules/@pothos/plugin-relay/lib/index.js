"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: ()=>_default,
    PothosRelayPlugin: ()=>PothosRelayPlugin
});
require("./global-types");
require("./field-builder");
require("./input-field-builder");
require("./schema-builder");
const _core = /*#__PURE__*/ _interopRequireWildcard(require("@pothos/core"));
const _internal = require("./utils/internal");
_exportStar(require("./types"), exports);
_exportStar(require("./utils"), exports);
function _exportStar(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) Object.defineProperty(to, k, {
            enumerable: true,
            get: function() {
                return from[k];
            }
        });
    });
    return from;
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const pluginName = 'relay';
const _default = pluginName;
class PothosRelayPlugin extends _core.BasePlugin {
    wrapResolve(resolver, fieldConfig) {
        const argMappings = (0, _core.mapInputFields)(fieldConfig.args, this.buildCache, (inputField)=>{
            var _inputField_extensions;
            if ((_inputField_extensions = inputField.extensions) === null || _inputField_extensions === void 0 ? void 0 : _inputField_extensions.isRelayGlobalID) {
                return true;
            }
            return null;
        });
        if (!argMappings) {
            return resolver;
        }
        const argMapper = (0, _core.createInputValueMapper)(argMappings, (globalID, mappings, ctx)=>(0, _internal.internalDecodeGlobalID)(this.builder, String(globalID), ctx));
        return (parent, args, context, info)=>resolver(parent, argMapper(args, undefined, context), context, info);
    }
    wrapSubscribe(subscribe, fieldConfig) {
        const argMappings = (0, _core.mapInputFields)(fieldConfig.args, this.buildCache, (inputField)=>{
            var _inputField_extensions;
            if ((_inputField_extensions = inputField.extensions) === null || _inputField_extensions === void 0 ? void 0 : _inputField_extensions.isRelayGlobalID) {
                return true;
            }
            return null;
        });
        if (!argMappings || !subscribe) {
            return subscribe;
        }
        const argMapper = (0, _core.createInputValueMapper)(argMappings, (globalID, mappings, ctx)=>(0, _internal.internalDecodeGlobalID)(this.builder, String(globalID), ctx));
        return (parent, args, context, info)=>subscribe(parent, argMapper(args, undefined, context), context, info);
    }
}
_core.default.registerPlugin(pluginName, PothosRelayPlugin);

//# sourceMappingURL=index.js.map