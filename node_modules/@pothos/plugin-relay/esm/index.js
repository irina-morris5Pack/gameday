import './global-types.js';
import './field-builder.js';
import './input-field-builder.js';
import './schema-builder.js';
import SchemaBuilder, { BasePlugin, createInputValueMapper, mapInputFields } from '@pothos/core';
import { internalDecodeGlobalID } from './utils/internal.js';
export * from './types.js';
export * from './utils/index.js';
const pluginName = "relay";
export default pluginName;
export class PothosRelayPlugin extends BasePlugin {
    wrapResolve(resolver, fieldConfig) {
        const argMappings = mapInputFields(fieldConfig.args, this.buildCache, (inputField) => {
            var _inputField_extensions;
            if ((_inputField_extensions = inputField.extensions) === null || _inputField_extensions === void 0 ? void 0 : _inputField_extensions.isRelayGlobalID) {
                return true;
            }
            return null;
        });
        if (!argMappings) {
            return resolver;
        }
        const argMapper = createInputValueMapper(argMappings, (globalID, mappings, ctx) => internalDecodeGlobalID(this.builder, String(globalID), ctx));
        return (parent, args, context, info) => resolver(parent, argMapper(args, undefined, context), context, info);
    }
    wrapSubscribe(subscribe, fieldConfig) {
        const argMappings = mapInputFields(fieldConfig.args, this.buildCache, (inputField) => {
            var _inputField_extensions;
            if ((_inputField_extensions = inputField.extensions) === null || _inputField_extensions === void 0 ? void 0 : _inputField_extensions.isRelayGlobalID) {
                return true;
            }
            return null;
        });
        if (!argMappings || !subscribe) {
            return subscribe;
        }
        const argMapper = createInputValueMapper(argMappings, (globalID, mappings, ctx) => internalDecodeGlobalID(this.builder, String(globalID), ctx));
        return (parent, args, context, info) => subscribe(parent, argMapper(args, undefined, context), context, info);
    }
}
SchemaBuilder.registerPlugin(pluginName, PothosRelayPlugin);
//# sourceMappingURL=index.js.map
