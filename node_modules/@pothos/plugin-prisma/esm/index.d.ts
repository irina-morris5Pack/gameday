import './global-types.js';
import './schema-builder.js';
import { GraphQLFieldResolver } from 'graphql';
import SchemaBuilder, { BasePlugin, BuildCache, PothosOutputFieldConfig, SchemaTypes } from '@pothos/core';
import { PrismaModelTypes } from './types.js';
import { formatPrismaCursor, parsePrismaCursor } from './util/cursors.js';
import { queryFromInfo } from './util/map-query.js';
export { prismaConnectionHelpers } from './connection-helpers.js';
export { PrismaNodeRef } from './node-ref.js';
export { PrismaObjectRef } from './object-ref.js';
export * from './types.js';
declare const pluginName: "prisma";
export default pluginName;
export { formatPrismaCursor, parsePrismaCursor, queryFromInfo };
export type PrismaObjectFieldBuilder<Types extends SchemaTypes, ParentShape> = PothosSchemaTypes.ObjectFieldBuilder<Types, ParentShape>;
export declare const ObjectFieldBuilder: new <Types extends SchemaTypes, Model extends PrismaModelTypes, NeedsResolve extends boolean, Shape extends object = Model["Shape"]>(name: string, builder: PothosSchemaTypes.SchemaBuilder<Types>) => PothosSchemaTypes.PrismaObjectFieldBuilder<Types, Model, NeedsResolve, Shape>;
export declare class PrismaPlugin<Types extends SchemaTypes> extends BasePlugin<Types> {
    constructor(cache: BuildCache<Types>);
    onOutputFieldConfig(fieldConfig: PothosOutputFieldConfig<Types>): PothosOutputFieldConfig<Types> | null;
    wrapResolve(resolver: GraphQLFieldResolver<unknown, Types["Context"], object, unknown>, fieldConfig: PothosOutputFieldConfig<Types>): GraphQLFieldResolver<unknown, Types["Context"], object>;
}
//# sourceMappingURL=index.d.ts.map
